default_platform(:ios)

xcodeproj = File.absolute_path('../ReactNativeTemplate.xcodeproj')
xcworkspace = File.absolute_path('../ReactNativeTemplate.xcworkspace')
plist_file_path = File.absolute_path("../ReactNativeTemplate/Info.plist")

DEVELOPER_APP_ID = ENV["DEVELOPER_APP_ID"]
DEVELOPER_APP_IDENTIFIER = ENV["DEVELOPER_APP_IDENTIFIER"]
DEVELOPER_PORTAL_TEAM_ID=ENV["DEVELOPER_PORTAL_TEAM_ID"]
PROVISIONING_PROFILE_SPECIFIER = ENV["PROVISIONING_PROFILE_SPECIFIER"]
APPLE_ISSUER_ID = ENV["APPLE_ISSUER_ID"]
APPLE_KEY_ID = ENV["APPLE_KEY_ID"]
APPLE_KEY_CONTENT = ENV["APPLE_KEY_CONTENT"]
GIT_AUTHORIZATION = ENV["GIT_AUTHORIZATION"]

IOS_VERSION_NUMBER = ENV['IOS_VERSION_NUMBER']

require_relative 'scripts/util_helper'

def fetch_build_number(version_number)
  # Capture the output of `latest_testflight_build_number`
  captured_logs = Fastlane::Helper::UtilHelper.capture_fastlane_output do
    @latest_build = latest_testflight_build_number(version: version_number)
  end

  # Analyze the logs
  if captured_logs.include?("Could not find a build for version")
    puts "No builds exist for version #{version_number}. Starting with build number 1."
    return 1
  else
    puts "Latest build number for version #{version_number}: #{@latest_build}"
    return @latest_build + 1
  end
end

platform :ios do
  desc "Submit a new build to app store"
  lane :deploy_to_testflight do
    setup_ci(
      force: true
    )

    # Access to App Store Connect API
    api_key = app_store_connect_api_key(
      key_id: APPLE_KEY_ID,
      issuer_id: APPLE_ISSUER_ID,
      key_content: APPLE_KEY_CONTENT,
      is_key_content_base64: true,
      duration: 1200,
      in_house: false
    )

    @buildNumber = fetch_build_number(IOS_VERSION_NUMBER)

    #Set build number
    increment_build_number(
      xcodeproj: xcodeproj,
      build_number: @buildNumber
    )

    #Set version number
    increment_version_number(
      xcodeproj: xcodeproj,
      version_number: IOS_VERSION_NUMBER
    )

    ios_version_number = get_version_number(
      xcodeproj: xcodeproj
    )

    # Match appstore file
    sync_code_signing(
      type: 'appstore',
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      git_basic_authorization: Base64.strict_encode64(GIT_AUTHORIZATION),
      readonly: false,
      api_key: api_key
    )

    # # Update code signing settings
    update_code_signing_settings(
      use_automatic_signing: false,
      team_id: DEVELOPER_PORTAL_TEAM_ID,
      bundle_identifier: DEVELOPER_APP_IDENTIFIER,
      profile_name: PROVISIONING_PROFILE_SPECIFIER,
      code_sign_identity: "iPhone Distribution"
    )

    # Build the App
    build_app(
      workspace: "ReactNativeTemplate.xcworkspace",
      export_xcargs: "-allowProvisioningUpdates",
      scheme: "ReactNativeTemplate",
        configuration: "Release",
        export_method: "app-store",
        export_options: {
          provisioningProfiles: {
            DEVELOPER_APP_IDENTIFIER => PROVISIONING_PROFILE_SPECIFIER
          }
        },
      clean: true,
      silent: true,
    )

    # Upload the build to TestFlight
    upload_to_testflight

    # Clean up build artifacts
    clean_build_artifacts
  end
end
